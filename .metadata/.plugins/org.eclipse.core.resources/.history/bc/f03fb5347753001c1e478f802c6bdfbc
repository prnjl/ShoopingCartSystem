package com.casestudy.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.casestudy.exception.BusinessException;
import com.casestudy.exception.EmptyInputException;
import com.casestudy.exception.ProductNotFoundException;
import com.casestudy.model.Product;
import com.casestudy.repository.ProductRepository;

public class ProductServiceImpl implements ProductService{

	@Autowired
	ProductRepository productRepository;
	
	@Override
	public List<Product> getAllProducts() {
		
		List<Product> allProduct = productRepository.findAll();
		if(allProduct.isEmpty())
			throw new BusinessException("604" , "List is empty , Nothing to show");
		return allProduct;
		
	}

	@Override
	public List<Product> getProductByName(String productName) {

		List<Product> findProductbyName=productRepository.findByProductName(productName)
		if (findProductbyName.isEmpty()) {
			throw new EmptyInputException("888", "product not found!!");
		}
		else
			return productRepository.findByProductName(productName);
	}
	@Override
	public List<Product> getProductByCategory(String category) {
		
		return productRepository.findByCategory(category) ;
	}

	@Override
	public List<Product> getProductByType(String productType) {
		
		return productRepository.findByProductType(productType);
	}

	@Override
	public Product addProduct(Product product) {
		
		if(product.getProductName().isEmpty()|| product.getProductName().length()==0) {
			throw new EmptyInputException("601" , "Inputs Reqired");
			
		}
		return productRepository.save(product);
	}

	@Override
	public updateProduct(Product product, String productName) {
		boolean isProductExist=productRepository.existsById(productName);
		if(isProductExist) {
			productRepository.save(product);
			
			
		}else
		{
			throw new ProductNotFoundException("123","Product Not Found!!");
		}
	
	
	}

	@Override
	public Product deleteByProductName(String productName) {
		
		boolean isProductExist=productRepository.existsById(productName);
        if(isProductExist)
        {
        	productRepository.deleteByProductName(productName);
            
        }
        else
        {
            throw new ProductNotFoundException("555","Product Not Found!!" );
        }
	}

}
